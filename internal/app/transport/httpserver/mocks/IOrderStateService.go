// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/KozlovNikolai/marketplace/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// IOrderStateService is an autogenerated mock type for the IOrderStateService type
type IOrderStateService struct {
	mock.Mock
}

// CreateOrderState provides a mock function with given fields: _a0, _a1
func (_m *IOrderStateService) CreateOrderState(_a0 context.Context, _a1 domain.OrderState) (domain.OrderState, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderState")
	}

	var r0 domain.OrderState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrderState) (domain.OrderState, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrderState) domain.OrderState); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.OrderState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.OrderState) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrderState provides a mock function with given fields: _a0, _a1
func (_m *IOrderStateService) DeleteOrderState(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrderState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderState provides a mock function with given fields: _a0, _a1
func (_m *IOrderStateService) GetOrderState(_a0 context.Context, _a1 int) (domain.OrderState, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderState")
	}

	var r0 domain.OrderState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.OrderState, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.OrderState); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.OrderState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderStates provides a mock function with given fields: _a0, _a1, _a2
func (_m *IOrderStateService) GetOrderStates(_a0 context.Context, _a1 int, _a2 int) ([]domain.OrderState, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderStates")
	}

	var r0 []domain.OrderState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]domain.OrderState, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.OrderState); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.OrderState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderState provides a mock function with given fields: _a0, _a1
func (_m *IOrderStateService) UpdateOrderState(_a0 context.Context, _a1 domain.OrderState) (domain.OrderState, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderState")
	}

	var r0 domain.OrderState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrderState) (domain.OrderState, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrderState) domain.OrderState); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.OrderState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.OrderState) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOrderStateService creates a new instance of IOrderStateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderStateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderStateService {
	mock := &IOrderStateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
