// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/KozlovNikolai/marketplace/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// IProviderService is an autogenerated mock type for the IProviderService type
type IProviderService struct {
	mock.Mock
}

// CreateProvider provides a mock function with given fields: _a0, _a1
func (_m *IProviderService) CreateProvider(_a0 context.Context, _a1 domain.Provider) (domain.Provider, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvider")
	}

	var r0 domain.Provider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Provider) (domain.Provider, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Provider) domain.Provider); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Provider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Provider) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvider provides a mock function with given fields: _a0, _a1
func (_m *IProviderService) DeleteProvider(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProvider provides a mock function with given fields: _a0, _a1
func (_m *IProviderService) GetProvider(_a0 context.Context, _a1 int) (domain.Provider, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 domain.Provider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.Provider, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.Provider); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Provider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviders provides a mock function with given fields: _a0, _a1, _a2
func (_m *IProviderService) GetProviders(_a0 context.Context, _a1 int, _a2 int) ([]domain.Provider, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetProviders")
	}

	var r0 []domain.Provider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]domain.Provider, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.Provider); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Provider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvider provides a mock function with given fields: _a0, _a1
func (_m *IProviderService) UpdateProvider(_a0 context.Context, _a1 domain.Provider) (domain.Provider, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvider")
	}

	var r0 domain.Provider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Provider) (domain.Provider, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Provider) domain.Provider); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Provider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Provider) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProviderService creates a new instance of IProviderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProviderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProviderService {
	mock := &IProviderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
